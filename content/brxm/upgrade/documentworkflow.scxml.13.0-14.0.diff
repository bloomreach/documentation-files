Index: workflow/src/main/resources/hcm-config/documentworkflow.scxml
===================================================================
--- workflow/src/main/resources/hcm-config/documentworkflow.scxml	(revision 98cf41b125cc05d9ce34713dcd5dcab583f05bb0)
+++ workflow/src/main/resources/hcm-config/documentworkflow.scxml	(revision 12beae06f4ea03b0cf1c845f932c1e232ce5943e)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <!--
-  Copyright 2013-2018 Hippo B.V. (http://www.onehippo.com)
+  Copyright 2013-2019 Hippo B.V. (http://www.onehippo.com)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
@@ -130,10 +130,6 @@
       workflowData.requestPending
     }

-    def getContainingFolder() {
-      workflowData.handle.parent
-    }
-
     // true if the branch from  from DocumentHandle is 'master'
     def boolean isMaster() {
       branches.contains('master') and 'master'.equals(branchId)
@@ -332,6 +328,7 @@
             <!-- for all requests determine the available request actions and report them through the special 'requests'
                  feedback map variable -->
             <!-- for document workflow requests: -->
+            <hippo:requestAction identifierExpr="request.identity" action="infoRequest" enabledExpr="true"/>
             <if cond="request.workflowRequest">
               <if cond="workflowContext.isGranted(request, 'hippo:editor')">
                 <!-- editor users (granted hippo:editor) may reject and accept as well as cancel requests -->
@@ -578,6 +575,7 @@
              Note: this uses custom/manual copying of the version contents, unlike the restoreVersion operation below -->
         <transition event="versionRestoreTo">
           <hippo:versionRestoreTo historic="_event.data?.date" variant="unpublished" target="_event.data?.target"/>
+          <hippo:result value="unpublished"/>
         </transition>

         <!-- target-less transition to restore a specific document version from the event payload provided parameter date.
@@ -603,6 +601,7 @@
           <!-- after the restore, the newly restored unpublished variant for branch 'x' needs to be versioned to make
                sure that the 'x-unpublished' label points to the right version -->
           <hippo:version variant="unpublished"/>
+          <hippo:result value="unpublished"/>
         </transition>
       </state>

@@ -935,10 +934,8 @@
            allowed or possible -->
       <state id="no-terminate">
         <onentry>
-          <!-- report request delete operation as available but default disabled -->
-          <hippo:action action="requestDelete" enabledExpr="false"/>
-          <if cond="workflowContext.isGranted(deleteSource, 'hippo:editor') and workflowContext.isGranted(containingFolder, 'jcr:write')">
-            <!-- if the user is editor (granted hippo:editor) AND allowed to modify (jcr:write) the document folder,
+          <if cond="workflowContext.isGranted(deleteSource, 'hippo:author')">
+            <!-- if the user is author (granted hippo:author),
                  report the delete/move/rename operations as available but default disabled -->
             <hippo:action action="delete" enabledExpr="false"/>
             <hippo:action action="move" enabledExpr="false"/>
@@ -954,11 +951,8 @@
         <onentry>
           <if cond="!requestPending">
             <!-- delete operations are only allowed when (also) no request is pending -->
-            <!-- (then) always enable the request delete operation -->
-            <hippo:action action="requestDelete" enabledExpr="true"/>
-            <if cond="workflowContext.isGranted(deleteSource, 'hippo:editor') and workflowContext.isGranted(containingFolder, 'jcr:write')">
-              <!-- if the user is editor (granted hippo:editor) AND allowed to modify (jcr:write) the document folder,
-                   enable the delete/move/rename operations -->
+            <if cond="workflowContext.isGranted(deleteSource, 'hippo:author')">
+              <!-- if the user is editor (granted hippo:editor) enable the delete/move/rename operations -->
               <hippo:action action="delete" enabledExpr="true"/>
               <hippo:action action="move" enabledExpr="true"/>
               <hippo:action action="rename" enabledExpr="true"/>
@@ -966,11 +960,6 @@
           </if>
         </onentry>

-        <!-- target-less transition to create a delete request -->
-        <transition event="requestDelete">
-          <hippo:workflowRequest type="delete" contextVariantExpr="deleteSource"/>
-        </transition>
-
         <!-- transition to delete the current document and go to final state terminated -->
         <transition event="delete" target="terminated">
           <hippo:archiveDocument/>
@@ -993,13 +982,13 @@
     <!-- the composite copy state is used to manage the copy workflow operation -->
     <state id="copy">

-      <!-- the initial no-copy state is used and active when the user is not an editor (granted hippo:editor) -->
+      <!-- the initial no-copy state is used and active when the user is not an author (granted hippo:author) -->
       <state id="no-copy">
-        <!-- event-less transition to copyable state when the user is an editor (granted hippo:editor) -->
-        <transition target="copyable" cond="workflowContext.isGranted(copySource,'hippo:editor') and branchExists"/>
+        <!-- event-less transition to copyable state when the user is an author (granted hippo:author) -->
+        <transition target="copyable" cond="workflowContext.isGranted(copySource,'hippo:author') and branchExists"/>
       </state>

-      <!-- the state copyable is only active for users which are editor (granted hippo:editor) -->
+      <!-- the state copyable is active for users which are author (granted hippo:author) -->
       <state id="copyable">
         <onentry>
           <!-- always enable the copy operation -->

